ext.classname = 'org.knirxot.flume.FlumeAvroPlugin'
version = "${esVersion}_${version}"

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(ScalaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    implementation "org.elasticsearch:elasticsearch:$esVersion"
}

def jars = [
        'plugin-security.policy',
        'elasticsearch-flume-avro-plugin*.jar',
        'flume-avro*.jar',
        "avro*.jar",
        "avro-ipc*.jar",
        "commons-collections*.jar",
        "commons-io*.jar",
        "commons-lang*.jar",
        "commons-logging*.jar",
        "flume-ng-configuration*.jar",
        "flume-ng-core*.jar",
        "flume-ng-embedded-agent*.jar",
        "flume-ng-node*.jar",
        "flume-ng-sdk*.jar",
        "flume-file-channel*.jar",
        "gson*.jar",
        "jackson-core-asl*.jar",
        "jackson-mapper-asl*.jar",
        "libthrift*.jar",
        "mapdb*.jar",
        "protobuf-java*.jar",
        "scala-library*.jar",
        "serializer*.jar",
        "slf4j-api*.jar",
        "slf4j-log4j*.jar",
]

task makePluginDescriptor() {
    def prop = new Properties()
    def input = project.rootProject.file("plugin-descriptor.properties.template").newDataInputStream()
    def output = project.rootProject.file("plugin-descriptor-${version}.properties").newDataOutputStream()
    prop.load(input)
    input.close()
    prop.setProperty('version', "$version")
    prop.setProperty('classname', "$classname")
    prop.setProperty('elasticsearch.version', "$esVersion")
    prop.setProperty('jvm', "true")
    prop.store(output, "Elasticsearch plugin descriptor file\n#This file must exist as 'plugin-descriptor.properties' inside a plugin.")
    output.close()
}

task release(dependsOn: [makePluginDescriptor]) {
    doLast({
        file("$buildDir/zip/elasticsearch").mkdirs()
        file("$buildDir/zip/elasticsearch").eachFile {
            f -> delete f
        }
        copy {
            from project.rootProject.file("plugin-descriptor-${version}.properties")
            rename "plugin-descriptor-${version}.properties", 'plugin-descriptor.properties'
            into "$buildDir/zip/elasticsearch"
        }
        copy {
            from "$buildDir/libs"
            from configurations.runtime
            from "src/main/resources"
            include jars
            into "$buildDir/zip/elasticsearch"
        }
    })
}

task zip(type: Zip) {
    from "$buildDir/zip"
    destinationDir file("$buildDir")
}